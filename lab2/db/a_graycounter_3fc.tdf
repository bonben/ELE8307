--a_graycounter DEVICE_FAMILY="Cyclone II" PVALUE=1 WIDTH=5 aclr clock cnt_en q ALTERA_INTERNAL_OPTIONS=suppress_da_rule_internal=s102
--VERSION_BEGIN 13.0 cbx_a_gray2bin 2013:06:12:18:03:43:SJ cbx_a_graycounter 2013:06:12:18:03:43:SJ cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = reg 8 
OPTIONS ALTERA_INTERNAL_OPTION = "suppress_da_rule_internal=s102;{-to counter12a0} POWER_UP_LEVEL=HIGH;{-to parity13} POWER_UP_LEVEL=HIGH";

SUBDESIGN a_graycounter_3fc
( 
	aclr	:	input;
	clock	:	input;
	cnt_en	:	input;
	q[4..0]	:	output;
) 
VARIABLE 
	counter12a0 : dffeas
		WITH (
			power_up = "high"
		);
	counter12a1 : dffeas;
	counter12a2 : dffeas;
	counter12a3 : dffeas;
	counter12a4 : dffeas;
	parity13 : dffeas
		WITH (
			power_up = "high"
		);
	sub_parity14a[1..0] : dffeas;
	cntr_cout[4..0]	: WIRE;
	parity_cout	: WIRE;
	sclr	: NODE;
	updown	: NODE;

BEGIN 
	counter12a[4..0].clk = clock;
	counter12a[4..1].clrn = (! aclr);
	counter12a[4..0].d = ( (counter12a[4].q $ cntr_cout[3..3]), (counter12a[3].q $ (counter12a[2].q & cntr_cout[2..2])), (counter12a[2].q $ (counter12a[1].q & cntr_cout[1..1])), (counter12a[1].q $ (counter12a[0].q & cntr_cout[0..0])), ((cnt_en & (counter12a[0].q $ (! parity_cout))) # ((! cnt_en) & counter12a[0].q)));
	counter12a[0].prn = (! aclr);
	counter12a[4..0].sclr = sclr;
	parity13.clk = clock;
	parity13.d = ((cnt_en & (sub_parity14a[0..0].q $ sub_parity14a[1..1].q)) # ((! cnt_en) & parity13.q));
	parity13.prn = (! aclr);
	parity13.sclr = sclr;
	sub_parity14a[].clk = ( clock, clock);
	sub_parity14a[].clrn = ( (! aclr), (! aclr));
	sub_parity14a[].d = ( ((cnt_en & counter12a[4..4].q) # ((! cnt_en) & sub_parity14a[1].q)), ((cnt_en & (((counter12a[0..0].q $ counter12a[1..1].q) $ counter12a[2..2].q) $ counter12a[3..3].q)) # ((! cnt_en) & sub_parity14a[0].q)));
	sub_parity14a[].sclr = ( sclr, sclr);
	cntr_cout[] = ( B"0", (cntr_cout[2..2] & (! counter12a[2].q)), (cntr_cout[1..1] & (! counter12a[1].q)), (cntr_cout[0..0] & (! counter12a[0].q)), (cnt_en & parity_cout));
	parity_cout = (((! parity13.q) $ updown) & cnt_en);
	q[] = counter12a[4..0].q;
	sclr = GND;
	updown = VCC;
END;
--VALID FILE
